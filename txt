const mongoose = require('mongoose');
const Contacts = require('../model/contactModel');
const createError = (status, message) => ({ status, message });


let memContacts = [];
let memNextId = 1;


const isDatabaseMarche = () => mongoose.connection && mongoose.connection.readyState === 1;


const validerContact = (body, requireAll = true) => {
  const { firstName, lastName, phone } = body;
  if (requireAll) {
    if (!firstName || !lastName || !phone) {
      throw createError(400, "Champs requis: firstName, lastName, phone");
    }
  } else if (!firstName && !lastName && !phone) {
    throw createError(400, "Au moins un champ à mettre à jour");
  }
  return { firstName, lastName, phone };
};


const createContact = async (req, res) => {
  try {
    const { firstName, lastName, phone } = validerContact(req.body, true);
    const ownerId = req.user.id;

    if (!isDatabaseMarche()) {
      const nextId = memNextId++;
      const created = {
        id: nextId,
        _id: String(nextId),
        ownerId,
        firstName: String(firstName).trim(),
        lastName: String(lastName).trim(),
        phone: String(phone).trim(),
        createdAt: new Date(),
      };
      memContacts.push(created);
      return res.status(201).json(created);
    } else {
      const newContact = await Contacts.create({
        ownerId,
        firstName: String(firstName).trim(),
        lastName: String(lastName).trim(),
        phone: String(phone).trim(),
      });
      return res.status(201).json(newContact);
    }
  } catch (err) {
    const status = err.status || 500;
    const message = err.message || "Erreur lors de la création du contact";
    return res.status(status).json({ message });
  }
};

const listContacts = async (req, res) => {
  try {
    const ownerId = req.user.id;
    if (!isDatabaseMarche()) {
      const result = memContacts.filter((c) => c.ownerId === ownerId);
      return res.status(200).json(result);
    } else {
      const result = await Contacts.find({ ownerId }).lean();
      return res.status(200).json(result);
    }
  } catch (err) {
    return res.status(500).json({ message: "Erreur lors de la récupération des contacts" });
  }
};

const getContactById = async (req, res) => {
  try {
    const ownerId = req.user.id;
    const id = req.params.id;
    if (!isDatabaseMarche()) {
      const intId = parseInt(id, 10);
      const contact = memContacts.find((c) => c.id === intId && c.ownerId === ownerId);
      if (!contact) return res.status(404).json({ message: 'Contact non trouvé' });
      return res.status(200).json(contact);
    } else {
      if (!mongoose.isValidObjectId(id)) return res.status(400).json({ message: 'ID invalide' });
      const contact = await Contacts.findOne({ _id: id, ownerId }).lean();
      if (!contact) return res.status(404).json({ message: "Contact non trouvé" });
      return res.status(200).json(contact);
    }
  } catch (err) {
    return res.status(500).json({ message: "Erreur lors de la récupération du contact" });
  }
};

const updateContact = async (req, res) => {
  try {
    const ownerId = req.user.id;
    const id = req.params.id;
    const { firstName, lastName, phone } = validerContact(req.body, false);
    if (!isDatabaseMarche()) {
      const intId = parseInt(id, 10);
      const index = memContacts.findIndex((c) => c.id === intId && c.ownerId === ownerId);
      if (index === -1) return res.status(404).json({ message: 'Contact non trouvé' });
      const updated = { ...memContacts[index] };
      if (firstName !== undefined) updated.firstName = String(firstName).trim();
      if (lastName !== undefined) updated.lastName = String(lastName).trim();
      if (phone !== undefined) updated.phone = String(phone).trim();
      memContacts[index] = updated;
      return res.status(200).json(updated);
    } else {
      if (!mongoose.isValidObjectId(id)) return res.status(400).json({ message: 'ID invalide' });
      const update = {};
      if (firstName !== undefined) update.firstName = String(firstName).trim();
      if (lastName !== undefined) update.lastName = String(lastName).trim();
      if (phone !== undefined) update.phone = String(phone).trim();
      const updated = await Contacts.findOneAndUpdate(
        { _id: id, ownerId },
        { $set: update },
        { new: true }
      ).lean();
      if (!updated) return res.status(404).json({ message: 'Contact non trouvé' });
      return res.status(200).json(updated);
    }
  } catch (err) {
    const status = err.status || 500;
    const message = err.message || "Erreur lors de la mise à jour du contact";
    return res.status(status).json({ message });
  }
};


const deleteContact = async (req, res) => {
  try {
    const ownerId = req.user.id;
    const id = req.params.id;
    if (!isDatabaseMarche()) {
      const intId = parseInt(id, 10);
      const index = memContacts.findIndex((c) => c.id === intId && c.ownerId === ownerId);
      if (index === -1) return res.status(404).json({ message: 'Contact non trouvé' });
      memContacts.splice(index, 1);
      return res.status(200).json({ message: 'Contact supprimé' });
    } else {
      if (!mongoose.isValidObjectId(id)) return res.status(400).json({ message: 'ID invalide' });
      const deleted = await Contacts.findOneAndDelete({ _id: id, ownerId });
      if (!deleted) return res.status(404).json({ message: 'Contact non trouvé' });
      return res.status(200).json({ message: "Contact supprimé" });
    }
  } catch (err) {
    return res.status(500).json({ message: "Erreur lors de la suppression du contact" });
  }
};

module.exports = {
  createContact,
  listContacts,
  getContactById,
  updateContact,
  deleteContact,
};
